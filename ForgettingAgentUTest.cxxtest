/*
 * tests/dynamics/ForgettingAgentUTest.cxxtest
 *
 * Unit test for ForgettingAgent
 *
 * This test verifys is the ForgettingAgent behaves correctly when
 * atoms are removed from the AtomSpace based on their LTI values.
 */

#include <cxxtest/TestSuite.h>
#include <iostream>
#include <opencog/attentionbank/bank/AttentionBank.h>
#include <opencog/attention/ForgettingAgent.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/base/Link.h>
#include <opencog/cogserver/server/CogServer.h>
#include <opencog/util/Logger.h>
#include <opencog/util/Config.h>
#include <opencog/cogserver/modules/agents/AgentsModule.h>
#include <opencog/attentionbank/types/atom_types.h>

using namespace opencog;

class ForgettingAgentUTest : public CxxTest::TestSuite
{
private:
    AtomSpace* as;
    CogServer* cogServer;
    Scheduler* scheduler;
    ForgettingAgent* forgettingAgent;
    AttentionBank* _bank;

public:
    void setUp()
    {
        cogServer = &cogserver();
        config().set("MODULES", "opencog/attention/libattention.so");
        cogServer->loadModules();
        config().set("MODULES", "libagents.so");

        Module* amod = cogServer->getModule("opencog::AgentsModule");
        AgentsModule* agmod = static_cast<AgentsModule*>(amod);
        scheduler = &agmod->get_scheduler();

        as = &cogserver().getAtomSpace();
        forgettingAgent = new ForgettingAgent(*cogServer);

        // Add the ForgettingAgent to the scheduler
        AbstractFactory<Agent>* forgettingAgentFactory = new Factory<ForgettingAgent, Agent>();
        scheduler->registerAgent(ForgettingAgent::info().id, forgettingAgentFactory);

        std::cout << "Setup ." << std::endl;
    }

    void tearDown()
    {
        delete forgettingAgent;
        cogServer->stop();
        std::cout << "TearDown." << std::endl;
    }

    void testAtomForgettingProcess()
    {
        // sample atoms
        Handle atom1 = as->add_node(CONCEPT_NODE, "Atom1");
        Handle atom2 = as->add_node(CONCEPT_NODE, "Atom2");
        Handle atom3 = as->add_node(CONCEPT_NODE, "Atom3");
        Handle atom4 = as->add_node(CONCEPT_NODE, "Atom4");

        std::cout << "Atoms created: " << atom1->to_string() << atom2->to_string() << atom3->to_string() << atom4->to_string() << std::endl;

        // Setting the LTI and VLTI values for the atoms9which the forgetting agent uses to remove them eventually)
        atom1->setTruthValue(SimpleTruthValue::createTV(0.1, 0.9));  
        atom2->setTruthValue(SimpleTruthValue::createTV(0.3, 0.9));  
        atom3->setTruthValue(SimpleTruthValue::createTV(0.5, 0.9));  
        atom4->setTruthValue(SimpleTruthValue::createTV(0.7, 0.9));  

        // Create links 
        as->add_link(ASYMMETRIC_HEBBIAN_LINK, atom1, atom2);
        as->add_link(ASYMMETRIC_HEBBIAN_LINK, atom3, atom4);


        // Stimulate atoms to bring them into the attentional focus
        AttentionBank& ab = attentionbank(as);
        ab.stimulate(atom1, 200);
        ab.stimulate(atom2, 200);
        ab.stimulate(atom3, 100);
        ab.stimulate(atom4, 100);


        // running the agent
        forgettingAgent->run();

        std::cout << "ForgettingAgent run." << std::endl;

        // remaning atoms check
        HandleSeq remainingAtoms;
        as->get_handles_by_type(remainingAtoms, ATOM, true);

        std::cout << "Remaining atoms after forgetting process: " << remainingAtoms.size() << std::endl;

        // check if atom1 is removed
        bool atom1Removed = true;
        bool atom2Remaining = false;
        for (const Handle& h : remainingAtoms) {
            if (h == atom1) {
                atom1Removed = false;  
            }
            if (h == atom2) {
                atom2Remaining = true;  
            }
        }
    // to check9is asseriton is true the test continues, if not it fails.
        TS_ASSERT(atom1Removed);           
        TS_ASSERT(atom2Remaining);         
    }
};
